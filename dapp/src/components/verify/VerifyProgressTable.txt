"use client";

import { useEffect, useState } from "react";
import { useAccount } from "wagmi";
import { Check, Clock, X } from "lucide-react";
import RegisterForm from "./RegisterForm";
import { RequestMintForm } from "./RequestMintForm";
import { ClaimSBTButton } from "./ClaimSBTButton";
import { getVerifyStatus, VerifyStatus } from "@/lib/server/verify";
import {
  Table,
  TableHeader,
  TableBody,
  TableRow,
  TableHead,
  TableCell,
} from "@/components/ui/table";
import { Card } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";

export default function VerifyProgressTable() {
  const [status, setStatus] = useState<VerifyStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const { address } = useAccount();

  useEffect(() => {
    if (!address) return;

    const fetchStatus = async () => {
      setLoading(true);
      try {
        const res = await getVerifyStatus(address);
        setStatus(res);
      } catch (err) {
        console.error("Gagal fetch status:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchStatus();
  }, [address]);

  if (!address) {
    return (
      <div className="p-4 text-sm text-muted-foreground">
        Silakan hubungkan wallet Anda untuk memulai proses verifikasi.
      </div>
    );
  }

  if (loading || !status) return <div>Loading...</div>;

  return (
    <Card className="p-4">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Langkah</TableHead>
            <TableHead>Status</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <Row
            step="1. Register Institusi"
            done={status.registered}
            pending={!status.registered}
          />
          {!status.registered && (
            <TableRow>
              <TableCell colSpan={2}>
                <RegisterForm onSuccess={() => location.reload()} />
              </TableCell>
            </TableRow>
          )}

          <Row
            step="2. Request Mint SBT"
            done={status.requested}
            pending={status.registered && !status.requested}
          />
          {status.registered && !status.requested && (
            <TableRow>
              <TableCell colSpan={2}>
                <RequestMintForm onSuccess={() => location.reload()} />
              </TableCell>
            </TableRow>
          )}

          <Row
            step="3. Persetujuan Admin"
            done={status.approved}
            pending={status.requested && !status.approved}
          />
          {status.requested && !status.approved && (
            <TableRow>
              <TableCell colSpan={2}>
                <StatusBox text="Menunggu persetujuan dari admin..." />
              </TableCell>
            </TableRow>
          )}

          <Row
            step="4. Klaim Token"
            done={status.claimed}
            pending={status.approved && !status.claimed}
          />
          {status.approved && (
            <TableRow>
              <TableCell colSpan={2}>
                {!status.claimed ? (
                  <ClaimSBTButton onSuccess={() => location.reload()} />
                ) : (
                  <StatusBox text="Token berhasil diklaim ðŸŽ‰" success />
                )}
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </Card>
  );
}

function Row({
  step,
  done,
  pending,
}: {
  step: string;
  done?: boolean;
  pending?: boolean;
}) {
  return (
    <TableRow>
      <TableCell>{step}</TableCell>
      <TableCell>
        {done ? (
          <span className="text-green-600 inline-flex items-center">
            <Check className="h-4 w-4 mr-1" /> Selesai
          </span>
        ) : pending ? (
          <span className="text-yellow-600 inline-flex items-center">
            <Clock className="h-4 w-4 mr-1" /> Menunggu
          </span>
        ) : (
          <span className="text-red-600 inline-flex items-center">
            <X className="h-4 w-4 mr-1" /> Belum
          </span>
        )}
      </TableCell>
    </TableRow>
  );
}

function StatusBox({ text, success }: { text: string; success?: boolean }) {
  return (
    <Alert variant={success ? "success" : "warning"}>
      <AlertDescription>{text}</AlertDescription>
    </Alert>
  );
}
