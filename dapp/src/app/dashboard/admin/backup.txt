// src/app/dashboard/admin/page.tsx
"use client";

import { useEffect, useMemo, useState } from "react";
import { useAccount, useReadContract, useWriteContract } from "wagmi";
import { contracts } from "@/lib/contracts";
import { checkRegistryOnChain } from "@/lib/checkRegistryOnChain";
import { PieChart, Pie, Cell, Tooltip, Legend } from "recharts";
import { Dialog } from "@headlessui/react";

interface InstitutionRequest {
  name: string;
  officialWebsite: string;
  contactEmail: string;
  institutionType: number;
  walletAddress: `0x${string}`;
}

const typeMap: Record<number, string> = {
  1: "Universitas",
  2: "Sekolah",
  3: "Pemerintah",
  4: "Perusahaan",
  5: "Lainnya",
};

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042", "#A28EF0"];

export default function AdminPage() {
  const { address, isConnected } = useAccount();
  const { data: owner } = useReadContract({
    address: contracts.registry.address,
    abi: contracts.registry.abi,
    functionName: "owner",
  });

  const { writeContractAsync } = useWriteContract();
  const [requests, setRequests] = useState<InstitutionRequest[]>([]);
  const [registeredList, setRegisteredList] = useState<InstitutionRequest[]>(
    []
  );
  const [selectedType, setSelectedType] = useState<number | null>(null);
  const [openModal, setOpenModal] = useState(false);

  const isAdmin =
    typeof owner === "string" &&
    typeof address === "string" &&
    owner.toLowerCase() === address.toLowerCase();

  useEffect(() => {
    if (!isConnected || !isAdmin) return;

    const fetchRequests = async () => {
      const res = await fetch("/api/admin/requests");
      const data: InstitutionRequest[] = await res.json();
      setRequests(data);
    };

    fetchRequests();
  }, [isConnected, isAdmin]);

  useEffect(() => {
    const fetchRegistered = async () => {
      const results = await Promise.all(
        requests.map(async (req) => {
          if (!req.walletAddress) return null;
          try {
            const isReg = await checkRegistryOnChain(req.walletAddress);
            return isReg ? req : null;
          } catch (err) {
            console.warn("[checkRegistryOnChain]", err);
            return null;
          }
        })
      );
      const filtered = results.filter(Boolean) as InstitutionRequest[];
      setRegisteredList(filtered);
    };

    if (requests.length > 0) fetchRegistered();
  }, [requests]);

  const handleRegister = async (institution: InstitutionRequest) => {
    try {
      await writeContractAsync({
        address: contracts.registry.address,
        abi: contracts.registry.abi,
        functionName: "registerInstitution",
        args: [
          institution.walletAddress,
          institution.name,
          institution.officialWebsite,
          institution.contactEmail,
          institution.institutionType,
        ],
      });
      alert("✅ Institusi berhasil didaftarkan ke registry on-chain");
    } catch (err) {
      console.error("[registerInstitution]", err);
      alert("❌ Gagal mendaftarkan institusi.");
    }
  };

  const filteredRequests = requests.filter(
    (req) => !registeredList.find((r) => r.walletAddress === req.walletAddress)
  );

  const typeStats = useMemo(() => {
    const count: Record<number, number> = {};
    registeredList.forEach((r) => {
      count[r.institutionType] = (count[r.institutionType] || 0) + 1;
    });
    return Object.entries(count).map(([type, value]) => ({
      name: typeMap[parseInt(type)],
      value,
    }));
  }, [registeredList]);

  if (!isConnected)
    return <div className="p-4">Harap hubungkan wallet terlebih dahulu.</div>;
  if (!isAdmin)
    return (
      <div className="p-4 text-red-600">
        🚫 Akses ditolak. Hanya admin (owner) yang dapat mengakses halaman ini.
      </div>
    );

  return (
    <div className="space-y-8 p-6">
      <h1 className="text-2xl font-bold mb-4">
        📥 Permintaan Pendaftaran Institusi
      </h1>

      <div className="overflow-x-auto border rounded-lg">
        <table className="w-full text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 text-left">Nama</th>
              <th className="p-2 text-left">Email</th>
              <th className="p-2 text-left">Website</th>
              <th className="p-2 text-left">Jenis</th>
              <th className="p-2 text-left">Wallet</th>
              <th className="p-2 text-left">Aksi</th>
            </tr>
          </thead>
          <tbody>
            {filteredRequests.map((req, i) => (
              <tr key={i} className="border-t">
                <td className="p-2">{req.name}</td>
                <td className="p-2">{req.contactEmail}</td>
                <td className="p-2">{req.officialWebsite}</td>
                <td className="p-2">{typeMap[req.institutionType]}</td>
                <td className="p-2">{req.walletAddress}</td>
                <td className="p-2">
                  <button
                    onClick={() => handleRegister(req)}
                    className="text-sm px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                  >
                    Daftarkan
                  </button>
                </td>
              </tr>
            ))}
            {filteredRequests.length === 0 && (
              <tr>
                <td colSpan={6} className="text-center p-4 text-gray-500">
                  Tidak ada permintaan baru.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <h2 className="text-xl font-semibold mt-10">✅ Institusi Terdaftar</h2>
      <div className="overflow-x-auto border rounded-lg">
        <table className="w-full text-sm">
          <thead className="bg-green-100">
            <tr>
              <th className="p-2 text-left">Nama</th>
              <th className="p-2 text-left">Email</th>
              <th className="p-2 text-left">Website</th>
              <th className="p-2 text-left">Jenis</th>
              <th className="p-2 text-left">Wallet</th>
            </tr>
          </thead>
          <tbody>
            {registeredList.map((reg, i) => (
              <tr key={i} className="border-t bg-green-50">
                <td className="p-2">{reg.name}</td>
                <td className="p-2">{reg.contactEmail}</td>
                <td className="p-2">{reg.officialWebsite}</td>
                <td className="p-2">{typeMap[reg.institutionType]}</td>
                <td className="p-2">{reg.walletAddress}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="mt-12">
        <h2 className="text-xl font-bold mb-4">📊 Statistik Institusi</h2>
        <div className="flex items-center gap-4">
          <PieChart width={400} height={300}>
            <Pie
              data={typeStats}
              dataKey="value"
              nameKey="name"
              cx="50%"
              cy="50%"
              outerRadius={100}
              fill="#8884d8"
              onClick={(entry) => {
                const type = Object.entries(typeMap).find(
                  ([, v]) => v === entry.name
                );
                if (type) {
                  setSelectedType(parseInt(type[0]));
                  setOpenModal(true);
                }
              }}
              label
            >
              {typeStats.map((_, index) => (
                <Cell
                  key={`cell-${index}`}
                  fill={COLORS[index % COLORS.length]}
                />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        </div>

        <Dialog open={openModal} onClose={() => setOpenModal(false)}>
          <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-40 z-50">
            <div className="bg-white p-6 rounded max-w-md w-full space-y-4">
              <h3 className="text-lg font-semibold">
                Institusi - {typeMap[selectedType || 0]}
              </h3>
              <ul className="text-sm">
                {registeredList
                  .filter((r) => r.institutionType === selectedType)
                  .map((r, i) => (
                    <li key={i} className="py-1">
                      {r.name} ({r.walletAddress})
                    </li>
                  ))}
              </ul>
              <button
                className="mt-4 text-sm text-blue-600 hover:underline"
                onClick={() => setOpenModal(false)}
              >
                Tutup
              </button>
            </div>
          </div>
        </Dialog>
      </div>
    </div>
  );
}
