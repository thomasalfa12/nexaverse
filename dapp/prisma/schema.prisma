// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SbtStatus {
  PENDING
  APPROVED
  CLAIMED
  REJECTED
}

enum SbtLifecycleStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

// GANTI InstitutionRequest & InstitutionList DENGAN INI
model VerifiedEntity {
  id              Int      @id @default(autoincrement())
  name            String
  officialWebsite String
  walletAddress   String   @unique
  createdAt       DateTime @default(now())
  status             RegistrationStatus @default(PENDING)
  registrationTxHash String?
  registeredAt       DateTime?
  SbtMint            SbtMint?
  issuedSbts CuratedSbt[]
}

model SbtMint {
  id            String      @id @default(cuid())
  entityId      Int         @unique // Pastikan setiap institusi hanya bisa punya satu permintaan SBT
  entity        Institution @relation(fields: [institutionId], references: [id])
  status        SbtStatus   @default(PENDING)

  tokenId        Int?      @unique
  uri            String?
  approvalTxHash String?
  approvedAt     DateTime?

  claimTxHash String?
  claimedAt   DateTime?

  requestTxHash String? // Simpan bukti permintaan on-chain
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
// Data profil pengguna yang bisa diedit.
model Profile {
  id                 String      @id @default(cuid())
  walletAddress      String      @unique
  name               String?
  bio                String?
  // ...
  curatedSbts        CuratedSbt[]
}

// "Blueprint" untuk kredensial yang dibuat oleh VerifiedEntity.
model CredentialTemplate {
  id                String @id @default(cuid())
  title             String
  description       String
  imageUrl          String
  contractAddress   String @unique // Alamat kontrak UserSBT yang di-deploy untuk template ini

  creatorId         Int
  creator           VerifiedEntity @relation(fields: [creatorId], references: [id])

  eligibilityList   EligibilityRecord[]
  issuedSbts        CuratedSbt[]
}

// Daftar kelayakan skala besar untuk setiap template.
model EligibilityRecord {
  id                  String @id @default(cuid())
  userWalletAddress   String
  status              String @default("ELIGIBLE") // ELIGIBLE, CLAIMED

  templateId          String
  template            CredentialTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, userWalletAddress])
}

// Cerminan off-chain dari aset on-chain, diisi oleh Event Listener.
model CuratedSbt {
  id                 String   @id @default(cuid())
  tokenId            String
  status             SbtLifecycleStatus @default(ACTIVE)
  expiresAt          DateTime?
  // ... metadata yang di-cache

  // Relasi untuk konteks
  ownerProfileId     String
  owner              Profile @relation(fields: [ownerProfileId], references: [id])
  
  templateId         String
  template           CredentialTemplate @relation(fields: [templateId], references: [id])

  issuerId           Int
  issuer             VerifiedEntity @relation(fields: [issuerId], references: [id])
  
  @@unique([templateId, tokenId])
}
