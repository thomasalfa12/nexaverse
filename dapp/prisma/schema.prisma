generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUM UNTUK STATUS (DIPERBAIKI & DIPERJELAS) ---

// Enum untuk proses verifikasi awal sebuah entitas oleh Super Admin.
// Ini akan digunakan di model `VerifiedEntity`.
enum VerificationStatus {
  PENDING
  REGISTERED
  REJECTED
}

// Enum untuk proses sebuah entitas terverifikasi mengklaim "Lencana Verified" mereka.
// Sangat selaras dengan kontrak VerifiedEntitySBT.sol dan alur `request -> approve -> claim`.
enum VerifiedSbtClaimStatus {
  NOT_REQUESTED
  REQUESTED
  APPROVED
  CLAIMED
}

// Enum untuk siklus hidup Kredensial Pengguna yang sudah diterbitkan.
// Sangat selaras dengan kontrak UserSBT.sol.
enum CredentialLifecycleStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

// --- MODEL INTI ---

// Merepresentasikan entitas yang terdaftar di ISBTRegistry.sol (cerminan 1:1)
model VerifiedEntity {
  id            Int    @id @default(autoincrement())
  // SINKRONISASI DENGAN KONTRAK: Menambahkan kembali field yang hilang
  name          String
  primaryUrl    String // Sebelumnya officialWebsite
  contactEmail  String
  entityType    Int // Sesuai dengan enum EntityType di kontrak
  walletAddress String @unique

  // FIX: Menggunakan enum yang benar untuk status verifikasi
  status             VerificationStatus @default(PENDING)
  registrationTxHash String?
  registeredAt       DateTime?

  // FIX: Menambahkan timestamp standar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  sbtClaimProcess   VerifiedSbtClaimProcess?
  createdTemplates  CredentialTemplate[]
  issuedCredentials CuratedCredential[]
}

// PERUBAHAN NAMA: "SbtMint" menjadi "VerifiedSbtClaimProcess" agar lebih jelas.
// Model ini melacak proses klaim "Lencana Verified" oleh sebuah entitas.
model VerifiedSbtClaimProcess {
  id       String                 @id @default(cuid())
  entityId Int                    @unique
  entity   VerifiedEntity         @relation(fields: [entityId], references: [id])
  // FIX: Menggunakan enum yang benar untuk alur klaim ini
  status   VerifiedSbtClaimStatus @default(NOT_REQUESTED)

  // Cerminan dari data di kontrak VerifiedEntitySBT
  cid     String? // Disimpan sebagai string, dikonversi ke bytes32 saat transaksi
  tokenId Int?    @unique

  // Pelacakan Transaksi
  requestTxHash  String?
  approvalTxHash String?
  claimTxHash    String?

  // FIX: Menambahkan timestamp standar dan `approvedAt`
  approvedAt DateTime?
  claimedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// Data profil pengguna umum (tidak berubah, sudah bagus)
model Profile {
  id               String              @id @default(cuid())
  walletAddress    String              @unique
  name             String?
  bio              String?
  ownedCredentials CuratedCredential[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

// "Blueprint" atau "Paket Kredensial" yang dibuat oleh VerifiedEntity
model CredentialTemplate {
  id              String @id @default(cuid())
  title           String
  description     String
  imageUrl        String
  contractAddress String @unique

  creatorId Int
  creator   VerifiedEntity @relation(fields: [creatorId], references: [id])

  // FIX: Menambahkan timestamp standar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eligibilityList   EligibilityRecord[]
  issuedCredentials CuratedCredential[]
}

// Daftar pengguna yang berhak mengklaim dari sebuah template
model EligibilityRecord {
  id                String @id @default(cuid())
  userWalletAddress String
  status            String @default("ELIGIBLE") // ELIGIBLE, CLAIMED

  templateId String
  template   CredentialTemplate @relation(fields: [templateId], references: [id])

  // FIX: Menambahkan timestamp standar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([templateId, userWalletAddress])
}

// Cerminan off-chain dari setiap UserSBT yang sudah di-mint.
// Diisi dan diperbarui oleh Event Listener.
model CuratedCredential {
  id      String @id @default(cuid())
  tokenId String

  // SINKRONISASI DENGAN UserSBT.sol
  status    CredentialLifecycleStatus @default(ACTIVE)
  expiresAt DateTime?

  // Metadata yang di-cache
  title       String
  description String?
  imageUrl    String

  // Relasi untuk konteks
  ownerProfileId String
  owner          Profile @relation(fields: [ownerProfileId], references: [id])

  templateId String
  template   CredentialTemplate @relation(fields: [templateId], references: [id])

  issuerId Int
  issuer   VerifiedEntity @relation(fields: [issuerId], references: [id])

  // FIX: Menambahkan timestamp standar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([templateId, tokenId])
}
