// File: schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- DEFINISI ENUM ---

enum VerificationStatus {
  PENDING
  REGISTERED
  REJECTED
}

enum VerifiedSbtClaimStatus {
  NOT_REQUESTED
  REQUESTED
  APPROVED
  CLAIMED
}

enum CredentialLifecycleStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum ModuleType {
  CONTENT
  LIVE_SESSION
  SUBMISSION
  QUIZ
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PricingType {
  FREE
  ONE_TIME
  SUBSCRIPTION
}

enum EnrollmentStatus {
  IN_PROGRESS
  COMPLETED
}

// --- MODEL AUTENTIKASI & PENGGUNA ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?   @db.Text
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  walletAddress String    @unique
  roles         String? // Disimpan sebagai JSON string
  entityId      Int? // Link ke profil VerifiedEntity jika ada

  accounts         Account[]
  sessions         Session[]
  ownedCredentials CuratedCredential[]
  submissions      Submission[]
  enrollments      Enrollment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- MODEL INTI APLIKASI ---

// Model untuk entitas terverifikasi (kreator kursus/kredensial)
model VerifiedEntity {
  id                 Int                @id @default(autoincrement())
  name               String
  bio                String?            @db.Text
  primaryUrl         String
  contactEmail       String
  entityType         Int
  walletAddress      String             @unique
  status             VerificationStatus @default(PENDING)
  registrationTxHash String?
  registeredAt       DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  sbtClaimProcess    VerifiedSbtClaimProcess?
  issuedCredentials  CuratedCredential[]
  // Relasi ke Course dan Credential yang dibuat oleh entitas ini
  createdCourses     Course[]
  createdCredentials Credential[]
}

// Proses klaim lencana terverifikasi untuk sebuah entitas
model VerifiedSbtClaimProcess {
  id       String                 @id @default(cuid())
  entityId Int                    @unique
  entity   VerifiedEntity         @relation(fields: [entityId], references: [id])
  status   VerifiedSbtClaimStatus @default(NOT_REQUESTED)
  cid      String?
  tokenId  Int?                   @unique
  // ... field lainnya
}

// --- MODEL COURSE & KONTENNYA (HASIL REFRACTOR) ---

// Model untuk Kursus
model Course {
  id              String       @id @default(cuid())
  title           String
  description     String       @db.Text
  imageUrl        String
  contractAddress String       @unique
  status          CourseStatus @default(DRAFT)
  category        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  creatorId Int
  creator   VerifiedEntity @relation(fields: [creatorId], references: [id])

  pricing     Pricing?
  modules     CourseModule[]
  enrollments Enrollment[]
}

// Model untuk Modul di dalam sebuah Kursus
model CourseModule {
  id              String     @id @default(cuid())
  stepNumber      Int
  title           String
  type            ModuleType
  durationMinutes Int?
  contentText     String?    @db.Text
  contentUrl      String?
  quizData        Json?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  submissions Submission[]
}

// Model untuk Harga sebuah Kursus
model Pricing {
  id       String      @id @default(cuid())
  type     PricingType @default(ONE_TIME)
  price    Decimal     @default(0.00) @db.Decimal(10, 2)
  currency String      @default("USD")

  courseId String @unique
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

// Model untuk Pendaftaran Pengguna ke sebuah Kursus
model Enrollment {
  id         String           @id @default(cuid())
  status     EnrollmentStatus @default(IN_PROGRESS)
  progress   Int              @default(0)
  enrolledAt DateTime         @default(now())

  userId  String
  student User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

// Model untuk Pengumpulan Tugas pada sebuah Modul
model Submission {
  id          String   @id @default(cuid())
  fileUrl     String
  notes       String?
  isApproved  Boolean  @default(false)
  submittedAt DateTime @default(now())

  moduleId String
  module   CourseModule @relation(fields: [moduleId], references: [id])

  userId    String
  submitter User   @relation(fields: [userId], references: [id])
}

// --- MODEL CREDENTIAL & DISTRIBUSINYA (HASIL REFRACTOR) ---

// Model untuk Template Kredensial (SBT)
model Credential {
  id              String   @id @default(cuid())
  title           String
  description     String   @db.Text
  imageUrl        String
  contractAddress String   @unique
  merkleRoot      String? // Untuk metode klaim (Merkle Claim)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  creatorId Int
  creator   VerifiedEntity @relation(fields: [creatorId], references: [id])

  eligibilityRecords EligibilityRecord[]
  issuedCredentials  CuratedCredential[]
}

// Model untuk mencatat siapa saja yang berhak menerima sebuah Kredensial
model EligibilityRecord {
  id                String   @id @default(cuid())
  userWalletAddress String
  status            String   @default("ELIGIBLE") // ELIGIBLE, CLAIMED
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  credentialId String
  credential   Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)

  @@unique([credentialId, userWalletAddress])
}

// Model untuk Kredensial yang sudah diterbitkan/dicetak (instance NFT)
model CuratedCredential {
  id          String                    @id @default(cuid())
  tokenId     String
  status      CredentialLifecycleStatus @default(ACTIVE)
  expiresAt   DateTime?
  title       String // Cache dari Credential Template
  description String?                   @db.Text // Cache dari Credential Template
  imageUrl    String // Cache dari Credential Template
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt

  userId String
  owner  User   @relation(fields: [userId], references: [id])

  issuerId Int
  issuer   VerifiedEntity @relation(fields: [issuerId], references: [id])

  // Relasi ke template aslinya
  credentialId String
  credential   Credential @relation(fields: [credentialId], references: [id])

  @@unique([credentialId, tokenId])
}
